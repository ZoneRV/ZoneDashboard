@page "/report/"
@using System.Data
@using Newtonsoft.Json
@using Dapper
@using DBLibrary.DbAccess
@using MySqlConnector
@using ApexCharts
@using Serilog

@if (allWarrantyData is null)
{
    <RadzenText>Loading..</RadzenText>
}
else
{
    <h1>Warranty Claims Insights</h1>

    <!-- Total Claims Card -->
    <div class="card text-white bg-info mb-3" style="width: 18rem;">
        <div class="card-header">Total Claims</div>
        <div class="card-body">
            <h5 class="card-title">@warrantyClaimCount</h5>
            <p class="card-text">Number of warranty claims during the selected period.</p>
        </div>
    </div>

    <!-- Total Sales Card -->
    <div class="card text-white bg-info mb-3" style="width: 18rem;">
        <div class="card-header">Total Sales</div>
        <div class="card-body">
            <h5 class="card-title">@String.Format("{0:C}", totalcost)</h5>
            <p class="card-text">Total sales for sales during the selected period.</p>
        </div>
    </div>

    <!-- Total Warranty Cost -->
    <div class="card text-white bg-info mb-3" style="width: 18rem;">
        <div class="card-header">Warranty Cost</div>
        <div class="card-body">
            <h5 class="card-title">@String.Format("{0:C}", totalwarrantyclaims)</h5>
            <p class="card-text">Total cost for warranty claims during the selected period.</p>
        </div>
    </div>

    <!-- Period selection tab -->
    <RadzenTabs SelectedIndex="periodKey" Change="OnTabChange">
        <Tabs>
            <RadzenTabsItem Text="Quarterly"></RadzenTabsItem>
            <RadzenTabsItem Text="Monthly"></RadzenTabsItem>
        </Tabs>
    </RadzenTabs>


    <!-- Display ApexChart -->
    <div class="my-4">
        <h3>Warranty Claims vs Sales</h3>
        <ApexChart @ref="Chart" TItem="DataItem" Title="Warranty Claims">
            <ApexPointSeries TItem="DataItem" Items="@periods.ElementAt(periodKey)" XValue="item => item.Key" YValue="item => item.Value" />
        </ApexChart>
    </div>

    <!-- Data Summary Table -->
    <div class="my-4">
        <h3>Data Summary</h3>
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Total Claims</th>
                    <th>Total Sales</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in warrantyClaimsByDay)
                {
                    <tr>
                        <td>@item.Key.ToString("yyyy-MM-dd")</td>
                        <td>@item.Value</td>
                        <td>@String.Format("{0:C}", item.Value)</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    decimal totalcost => allWarrantyData?.Sum(x => x.totalPrice) ?? 0;
    decimal totalwarrantyclaims => allWarrantyData?.Sum(x => x.cost) ?? 0;
    int warrantyClaimCount => allWarrantyData?.Count ?? 0;
    List<WarrantyClaims>? allWarrantyData = null;
    List<DateDataItem> warrantyClaimsByDay = new();
    List<List<DataItem>> periods = new();
    int periodKey { get; set; } = 0;

    private ApexChart<DataItem> Chart = default!;

    [Inject]
    public IConfiguration _Configuration { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        allWarrantyData = await GetObjectFromMySQL<WarrantyClaims>(@"SELECT num, totalPrice, cost, dateCreated FROM so;");

        if (allWarrantyData is null) return;

        warrantyClaimsByDay = allWarrantyData
            .GroupBy(claim => claim.trueDate.Date)
            .Select(g => new DateDataItem(g.Key, g.Sum(claim => claim.totalPrice)))
            .ToList();

        periods = new List<List<DataItem>>
        {
            allWarrantyData
                .GroupBy(claim => $"Q{(claim.trueDate.Month - 1) / 3 + 1} {claim.trueDate:yyyy}")
                .Select(g => new DataItem(g.Key, g.Sum(claim => claim.totalPrice)))
                .ToList(),

            allWarrantyData
                .GroupBy(claim => $"{claim.trueDate:MMM yyyy}")
                .Select(g => new DataItem(g.Key, g.Sum(claim => claim.totalPrice)))
                .ToList()
        };

        await base.OnInitializedAsync();
    }

    private async Task OnTabChange(int index)
    {
        periodKey = index;
        await Chart.UpdateSeriesAsync();
    }


    private async Task<List<T>> GetObjectFromMySQL<T>(string query)
    {
        using IDbConnection connection = new MySqlConnection(_Configuration.GetConnectionString("MySql"));
        return (await connection.QueryAsync<T>(query)).ToList();
    }

    public class WarrantyClaims
    {
        public required string num { get; init; }
        public decimal totalPrice { get; init; }
        public decimal cost { get; init; }
        private DateTimeOffset dateCreated { get; init; }
        public DateTime trueDate => dateCreated.LocalDateTime;
    }
}
