@page "/overview/"

@using System.Diagnostics
@using Microsoft.AspNetCore.WebUtilities

@inherits ProductionPageBase

<PageTitle>Overview</PageTitle>

@if (!DashboardConfig.AllowOverviewPage)
{
    <a>Overview page has beeen temporarily disabled due to technical reasons</a>
}
else if (PageLoaded)
{
    <StatFilterComponent Height="4rem"/>
    
    <RadzenTabs @ref="_tabs" Change="TabsUpdated" @bind-SelectedIndex="_tabsIndex">
        <Tabs>
            <RadzenTabsItem Text="Red Cards">
                <RedCardOverviewComponent @ref="_general"/>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Production">
                <VanProductionOverviewComponent @ref="_production"/>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Redline Deadline" Disabled="@(!Debugger.IsAttached)">
                <DepartmentAverageRedLineDeadLineComponent @ref="_redLine"/>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Handover View">
                <HandoverOverViewComponent @ref="_handover"/>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
}
else
{
    <RadzenText>Loading</RadzenText>
}

@code {
    [Inject] 
    public NavigationManager NavigationManager { get; set; } = default!;
    
    RedCardOverviewComponent? _general;
    HandoverOverViewComponent? _handover;
    VanProductionOverviewComponent? _production;
    DepartmentAverageRedLineDeadLineComponent? _redLine;

    RadzenTabs _tabs = default!;

    private int _tabsIndex = 0;

    public override void Dispose()
    {
        _general?.Dispose();
        _handover?.Dispose();
        _production?.Dispose();
        _redLine?.Dispose();
        
        base.Dispose();
    }

    protected override async Task OnInitializedAsync()
    {
        if (DashboardConfig.AllowOverviewPage)
        {
            List<string> idsToLoad = ProductionService.RequiredBoardIds().ToList();

            await ProductionService.GetBoardsAsync(Progress, idsToLoad);

            SubscribedIds = idsToLoad;
            SubscribedTypes = [BoardUpdateType.RedCard];

            UpdateRateLimit = TimeSpan.FromSeconds(60);
        }

        PageLoaded = true;
        
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            Uri uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            
            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("tab", out var value))
            {

                if (value == "Red Cards")
                {
                    _tabsIndex = 0;
                    StateHasChanged();
                }
                else if (value == "Production")
                {
                    _tabsIndex = 1;
                    StateHasChanged();
                }
                else if (value == "Redline Deadline")
                {
                    _tabsIndex = 2;
                    StateHasChanged();
                }
                else if (value == "Handover View")
                {
                    _tabsIndex = 3;
                    StateHasChanged();
                }
            }
        }
    }

    void TabsUpdated(int tabIndex)
    {
        UpdateUriQuery();
        
        if(_general is not null && !UpdatableComponents.Contains(_general))
            UpdatableComponents.Add(_general);
        
        if(_handover is not null && !UpdatableComponents.Contains(_handover))
            UpdatableComponents.Add(_handover);
        
        if(_redLine is not null && !UpdatableComponents.Contains(_redLine))
            UpdatableComponents.Add(_redLine);
        
        if(_production is not null && !UpdatableComponents.Contains(_production))
            UpdatableComponents.Add(_production);

        if (tabIndex == 0)
        {
            SubscribedTypes = [BoardUpdateType.RedCard];
            SubscribedIds = ProductionService.RequiredBoardIds().ToList();
        }
        
        else if (tabIndex == 1)
        {
            SubscribedTypes = [BoardUpdateType.JobCard, BoardUpdateType.Position, BoardUpdateType.RedCard];
            SubscribedIds = ProductionService.RequiredBoardIds().ToList();
        }
        
        else if (tabIndex == 2)
        {
            SubscribedTypes = [BoardUpdateType.Position, BoardUpdateType.JobCard];
            SubscribedIds = ProductionService.RequiredBoardIds().ToList();
        }
        
        else if (tabIndex == 3)
        {
            SubscribedTypes = [BoardUpdateType.JobCard, BoardUpdateType.Hanover, BoardUpdateType.RedCard];
            
            SubscribedIds = [];
            
            SubscribedIds.AddRange(ProductionService.GetNextExpoHanoverIds(10).ToList());
            SubscribedIds.AddRange(ProductionService.GetNextGen2HanoverIds(10).ToList());
        }
    }
    
    void UpdateUriQuery()
    {
        Dictionary<string, object?> parameters = [];
                
        parameters.Add("tab", _tabs.SelectedTab.Text);

        var newUri = NavigationManager.GetUriWithQueryParameters(parameters);
                
        NavigationManager.NavigateTo(newUri, false, true);
    }
}