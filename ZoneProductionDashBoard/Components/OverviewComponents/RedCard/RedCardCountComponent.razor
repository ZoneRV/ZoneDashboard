@using AngleSharp.Common
@using Orientation = Radzen.Orientation
@using Serilog
@using ApexCharts
@inherits UpdatableComponent

@implements IDisposable

<table>
    <tr>
        <td>Production:</td>
        <td>Created: @_createdRedCardCountProduction</td>
        <td>Completed within Production: @_completedRedCardProduction</td>
    </tr>
    <tr>
        <td>Redline:</td>
        <td>Created: @_createdRedCardCountRedline</td>
        <td>Completed from Production: @_redlineCompletedFromProd</td>
        <td>Uncompleted from Production: @_redlineUncompletedFromProd</td>
        <td>Total Completed: @(_completedRedCardCountRedline + _redlineCompletedFromProd)</td>
    </tr>
</table>

<div class="flex flex-col items-center justify-between">
    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
            <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center">
                <RadzenText Style="font-weight: bold">Production</RadzenText>
                <RadzenStack AlignItems="AlignItems.Center">
                    <RadzenText>Created:</RadzenText>
                    <RadzenText Style="color:red" TextStyle="TextStyle.H3">@_createdRedCardCountProduction</RadzenText>
                </RadzenStack>
                <RadzenStack AlignItems="AlignItems.Center">
                    <RadzenText>Completed:</RadzenText>
                    <RadzenText Style="color:limegreen" TextStyle="TextStyle.H3">@_completedRedCardProduction</RadzenText>
                </RadzenStack>
                <RadzenStack AlignItems="AlignItems.Center">
                    <RadzenText>Average:</RadzenText>
                    <RadzenText Style="color:red" TextStyle="TextStyle.H3">@_averageCardProduction</RadzenText>
                </RadzenStack>
            </RadzenStack>
            <RadzenStack AlignItems="AlignItems.Center">
                    <RadzenText Style="font-weight: bold">Redline</RadzenText>
                    <RadzenStack AlignItems="AlignItems.Center">
                        <RadzenStack Orientation="Orientation.Horizontal">
                            <RadzenStack AlignItems="AlignItems.Center">
                                <RadzenText>Created:</RadzenText>
                                <RadzenText Style="color:red" TextStyle="TextStyle.H3">@_createdRedCardCountRedline</RadzenText>
                            </RadzenStack>
                            <RadzenStack AlignItems="AlignItems.Center">
                                <RadzenText>Completed:</RadzenText>
                                <RadzenText Style="color:limegreen" TextStyle="TextStyle.H3">@_completedRedCardCountRedline</RadzenText>
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenStack>
                    <RadzenStack AlignItems="AlignItems.Center">
                        <RadzenText>From Production:</RadzenText>
                        <RadzenStack Orientation="Orientation.Horizontal">
                            <RadzenStack AlignItems="AlignItems.Center">
                                <RadzenText>Completed:</RadzenText>
                                <RadzenText Style="color:limegreen" TextStyle="TextStyle.H3">@_redlineCompletedFromProd</RadzenText>
                            </RadzenStack>
                            <RadzenStack AlignItems="AlignItems.Center">
                                <RadzenText>Outstanding:</RadzenText>
                                <RadzenText Style="color:red" TextStyle="TextStyle.H3">@_redlineUncompletedFromProd</RadzenText>
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenStack>
                    <RadzenStack AlignItems="AlignItems.Center">
                        <RadzenText>Average:</RadzenText>
                        <RadzenText Style="color:red" TextStyle="TextStyle.H3">@_averageCardRedline</RadzenText>
                    </RadzenStack>
                </RadzenStack>
            </RadzenStack>
        <ApexChart
            TItem="DataItem"
            Height="500"
            Width="230"
            @ref="@_typeChart"
            Options="@_options"
            OnDataPointSelection="DataClicked">
            <ApexPointSeries
                TItem="DataItem"
                Items="@_redCardTypeData"
                XValue="item => ((RedFlagIssue)item.Key).CleanName()"
                YValue="item => item.Value" 
                SeriesType="SeriesType.Donut"
                OrderByDescending="item => item.Y ?? 0"
                PointColor="item => _colorLookUp[(RedFlagIssue)item.Key]"/>
        </ApexChart>
    </RadzenStack>
</div>

@code {
    [Inject]
    public IProductionService ProductionService { get; set; } = default!;

    [Inject]
    public StatsService StatsService { get; set; } = default!;
    
    [Parameter, EditorRequired]
    public DateTime MinDate { get; set; }
    
    [Parameter, EditorRequired]
    public DateTime MaxDate { get; set; }

    public EventHandler<RedFlagIssue?>? IssueSelected;
    RedFlagIssue? _lastSelectedIssue;
    Dictionary<string, RedFlagIssue> _stringToIssue = [];
    Dictionary<RedFlagIssue, string> _colorLookUp = [];

    ApexChart<DataItem> _typeChart = default!;
    ApexChartOptions<DataItem> _options = new ApexChartOptions<DataItem>();

    int _createdRedCardCountProduction = 0;
    int _completedRedCardProduction = 0;
    decimal _averageCardProduction = 0;
    
    int _createdRedCardCountRedline = 0;
    int _completedRedCardCountRedline = 0;
    
    int _redlineCompletedFromProd = 0;
    int _redlineUncompletedFromProd = 0;
    
    decimal _averageCardRedline = 0;
    
    IEnumerable<DataItem> _redCardTypeData = [];
    
    public override void Update()
    {
        base.Update();
        GetCountData();
        InvokeAsync(async () =>
                    {
                        StateHasChanged();
                        await _typeChart.UpdateOptionsAsync(true, true, false);
                        await _typeChart.UpdateSeriesAsync();

                        if (_lastSelectedIssue.HasValue)
                        {
                            int element = 0;

                            foreach (var item in _typeChart.Series.First().Items)
                            {
                                if ((RedFlagIssue)item.Key == _lastSelectedIssue.Value && item.Value > 0)
                                {
                                    await _typeChart.ToggleDataPointSelectionAsync(0, element);
                                    break;
                                }

                                element++;
                            }
                        }
                    });
    }

    public void Dispose()
    {
        StatsService.CardFilterOptions.RedFlagIssues = Enum.GetValues<RedFlagIssue>();
        
        _typeChart.Dispose();
    }

    protected override void OnInitialized()
    {
        _options.Legend = new Legend()
        {
            Position = ApexCharts.LegendPosition.Bottom
        };

        foreach (RedFlagIssue issue in Enum.GetValues<RedFlagIssue>())
        {
            _stringToIssue.Add(issue.CleanName(), issue);
            _colorLookUp.Add(issue, issue.ToChartColor());
        }
        
        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            GetCountData();
            StateHasChanged();
        }
        base.OnAfterRender(firstRender);
    }

    void GetCountData()
    {
        List<RedCard> allRedCards = ProductionService.GetRedCards().ToList();

        allRedCards = allRedCards.Where(x =>
            {
                var van = ProductionService.ProductionVans[x.BoardName.ToLower()];
                
                return StatsService.SelectedVanType == x.VanType &&
                       x.CreationDate.HasValue &&
                       x.CreationDate.Value >= MinDate.Date &&
                       x.CreationDate.Value <= MaxDate.Date &&
                       ((van.HandoverState == HandoverState.HandedOver &&
                        van.HandoverStateLastUpdated < MaxDate.Date) ||
                       van.HandoverState == HandoverState.UnhandedOver);
            }).ToList();

        var filteredRedCards = allRedCards.Where(x =>  
            StatsService.CardFilterOptions.CardAreaOfOrigins.Contains(x.AreaOfOrigin) &&
            StatsService.CardFilterOptions.RedFlagIssues.Contains(x.RedFlagIssue)).ToList();

        /*var prodCards 
            = allRedCards.Where(x => 
                ProductionService.ProductionVans[x.BoardName.ToLower()].PositionHistory.InProductionBeforeDate(MaxDate.Date)).ToList();

        var redLineCards 
            = allRedCards.Where(x => 
                !ProductionService.ProductionVans[x.BoardName.ToLower()].PositionHistory.InProductionBeforeDate(MinDate.Date) &&
                (ProductionService.ProductionVans[x.BoardName.ToLower()].HandoverState == HandoverState.HandedOver &&
                ProductionService.ProductionVans[x.BoardName.ToLower()].HandoverStateLastUpdated > MaxDate.Date) 
                || ProductionService.ProductionVans[x.BoardName.ToLower()].HandoverState == HandoverState.UnhandedOver).ToList();*/
        
        var prodCreatedCards 
            = filteredRedCards.Where(x =>
            {
                DateTimeOffset dateLeftProd = ProductionService.ProductionVans[x.BoardName.ToLower()].PositionHistory.FirstOrDefault(x => x.position is PostProduction).date;
                
                if(dateLeftProd == default)
                    return true;

                return dateLeftProd > x.CreationDate;
            });

        _createdRedCardCountProduction = prodCreatedCards.Count();
        _completedRedCardProduction = prodCreatedCards.Count(x => x.CardStatus == CardStatus.Completed);
        
        var redlineCreatedCards 
            = filteredRedCards.Where(x =>
            {
                DateTimeOffset dateLeftProd = ProductionService.ProductionVans[x.BoardName.ToLower()].PositionHistory.FirstOrDefault(x => x.position is PostProduction).date;
                
                if(dateLeftProd == default)
                    return false;

                return dateLeftProd < x.CreationDate;
            });

        _createdRedCardCountRedline = redlineCreatedCards.Count();
        _completedRedCardCountRedline = redlineCreatedCards.Count(x => x.CardStatus == CardStatus.Completed);
        var leftFromProd = prodCreatedCards.Where(x => ProductionService.ProductionVans[x.BoardName.ToLower()].Position is PostProduction);

        _redlineCompletedFromProd = leftFromProd.Count(x => x.CardStatus is CardStatus.Completed || x.CardStatusLastUpdated > ProductionService.ProductionVans[x.BoardName.ToLower()].PositionHistory.Last().date);
        _redlineUncompletedFromProd = leftFromProd.Count(x => x.CardStatus is not CardStatus.Completed);
        
        _redCardTypeData = allRedCards.RedCardByTypeData();

        int vansInProd = allRedCards.Select(x => x.BoardName).Distinct().Count();
        
        int vansPastRedline = ProductionService.ProductionVans.Values.Count(x => 
            x.PositionHistory.InProductionBeforeDate(MaxDate.Date) && 
            (x.HandoverState == HandoverState.HandedOver &&
            x.HandoverStateLastUpdated < MaxDate.Date) ||
            x.HandoverState == HandoverState.UnhandedOver);
        
        if (vansInProd == 0)
            _averageCardProduction = 0;
        else
            _averageCardProduction = System.Math.Round(_createdRedCardCountProduction / (decimal)vansInProd, 1);

        if (vansPastRedline == 0)
            _averageCardRedline = 0;
        else
            _averageCardRedline = System.Math.Round(_createdRedCardCountRedline / (decimal)vansPastRedline, 1);
    }

    private void DataClicked(SelectedData<DataItem> item)
    {
        var newIssue = _stringToIssue[(string)item.DataPoint.X];
        
        if(_lastSelectedIssue.HasValue && _lastSelectedIssue == newIssue)
        {
            _lastSelectedIssue = null;
            StatsService.CardFilterOptions.RedFlagIssues = _lastSelectedIssue is null ? Enum.GetValues<RedFlagIssue>() : [_lastSelectedIssue.Value!];
            
            foreach (RedFlagIssue issue in Enum.GetValues<RedFlagIssue>())
            {
                _colorLookUp[issue] = issue.ToChartColor();
            }
            
            IssueSelected?.Invoke(this, null);
        }

        else
        {
            _lastSelectedIssue = newIssue;
            StatsService.CardFilterOptions.RedFlagIssues = [newIssue];
            
            foreach (RedFlagIssue issue in Enum.GetValues<RedFlagIssue>())
            {
                 _colorLookUp[issue] =  newIssue == issue ? issue.ToChartColor() : "#808080";
            }
            
            IssueSelected?.Invoke(this, newIssue);
        }
        
        Log.Logger.Debug("{issueType} selected for red card component.", _lastSelectedIssue);
    }
}
